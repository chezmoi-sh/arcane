#!/bin/sh
# trunk-ignore-all(shellcheck/SC3037,shellcheck/SC3043): this is a shell is not a POSIX shell
# trunk-ignore-all(shellcheck/SC2312): don't care about exit code

set -u

# OpenBao SoftHSM Token Generator (softhsm:tokens:new)
# This script generates SoftHSMv2 tokens with OpenBao keys for PKCS#11 auto-unseal

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly CYAN='\033[0;36m'
readonly BLUE='\033[0;34m'
readonly GRAY='\033[0;90m'
readonly NC='\033[0m' # No Color

# Tree characters for better visualization
readonly TREE_BRANCH="├── "
readonly TREE_LAST="└── "
readonly TREE_PIPE="│   "
# readonly TREE_SPACE="    "
readonly CHECK="✓"
readonly CROSS="✗"
readonly ARROW="→"

# Print colored output with tree structure
log_info() { echo -e "${CYAN}[INFO]${NC} $*" >&2; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $*" >&2; }
log_error() { echo -e "${RED}[ERROR]${NC} $*" >&2; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $*" >&2; }
log_tree() { echo -e "${GRAY}$1${NC}$2" >&2; }
log_tree_ok() { echo -e "${GRAY}$1${GREEN}${CHECK}${NC} $2" >&2; }
log_tree_warn() { echo -e "${GRAY}$1${YELLOW}${CROSS}${NC} $2" >&2; }
log_tree_info() { echo -e "${GRAY}$1${BLUE}${ARROW}${NC} $2" >&2; }

# Configuration
TOKENS_DIR="${1:-/tokens}"
TOKEN_LABEL="${2:-openbao-token}"
KEY_LABEL="${3:-openbao-unseal-key}"
MECHANISM="${4:-AES-GCM}"

# Generate base64 encoded content for Kubernetes secret
generate_base64() {
	echo -n "$1" | base64 | tr -d '\n'
}

# Generate Kubernetes secret YAML
generate_k8s_secret() {
	local archive_path="$1"
	local pin_path="$2"
	local secret_name="$3"

	log_tree "${TREE_BRANCH}" "Generating Kubernetes secret..."

	# Read and encode the files
	local tokens_b64 pin_b64
	tokens_b64=$(base64 <"${archive_path}" | tr -d '\n')
	pin_b64=$(base64 <"${pin_path}" | tr -d '\n')

	# Generate the secret YAML
	local secret_file="${TOKENS_DIR}/${secret_name}.secret.yaml"
	cat >"${secret_file}" <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: ${secret_name}
  labels:
    app.kubernetes.io/component: hsm-tokens
  annotations:
    softhsm2.org/description: "SoftHSMv2 tokens and PIN for OpenBao PKCS#11 auto-unseal"  
    softhsm2.org/token-label: "${TOKEN_LABEL}"
    softhsm2.org/key-label: "${KEY_LABEL}"
    softhsm2.org/mechanism: "${MECHANISM}"
type: Opaque
data:
  tokens.tar: ${tokens_b64}
  pin: ${pin_b64}
EOF

	log_tree "${TREE_PIPE}${TREE_LAST}" "${GREEN}${CHECK}${NC} Secret YAML created"
	echo "${secret_file}"
}

# Generate README.md with setup instructions
generate_readme() {
	local archive_path="$1"
	local secret_file="$2"

	log_tree "${TREE_BRANCH}" "Generating README.md..."

	local readme_file="${TOKENS_DIR}/README.md"
	cat >"${readme_file}" <<EOF
# OpenBao SoftHSM Tokens

> Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

## 📋 Token Information

| Property | Value |
|----------|-------|
| **Token Label** | \`${TOKEN_LABEL}\` |
| **Key Label** | \`${KEY_LABEL}\` |
| **Mechanism** | \`${MECHANISM}\` |
| **PIN** | \`${PIN}\` |
| **SO-PIN** | \`${SO_PIN}\` |

## 🔧 OpenBao Configuration

Add this seal configuration to your OpenBao HCL config:

\`\`\`hcl
seal "pkcs11" {
  lib            = "/lib/softhsm/libsofthsm2.so"
  pin            = "${PIN}"
  token_label    = "${TOKEN_LABEL}"
  key_label      = "${KEY_LABEL}"
}
\`\`\`

## 🚀 Kubernetes Deployment

### 1. Apply the Secret

\`\`\`bash
kubectl apply -f $(basename "${secret_file}")
\`\`\`

### 2. Mount in OpenBao Pod

\`\`\`yaml
spec:
  containers:
  - name: openbao
    volumeMounts:
    - name: softhsm-tokens
      mountPath: /run/secrets/softhsm2
      readOnly: true
  volumes:
  - name: softhsm-tokens
    secret:
      secretName: openbao-softhsm-tokens
\`\`\`

## 📁 Directory Contents

\`\`\`
$(ls -la "${TOKENS_DIR}")
\`\`\`

## 📦 Archive Contents (HSM tokens only)

\`\`\`
$(tar -tf "${archive_path}" 2>/dev/null || echo "Archive not available")
\`\`\`

## 🔐 Mechanism Support

| Mechanism | Status | Notes |
|-----------|--------|-------|
| **AES-GCM** | ✅ Recommended | AEAD-compatible, fully supported by OpenBao |
| **AES** | ⚠️ Legacy | May not work with OpenBao AEAD requirements |
| **RSA** | ✅ Alternative | Asymmetric encryption option |

$(if [ "${MECHANISM}" = "AES-GCM" ] || [ "${MECHANISM}" = "aes-gcm" ]; then
		echo "### 🎯 Current Configuration"
		echo ""
		echo "> ✅ **AEAD-compatible key created for OpenBao!**"
	fi)

## 🛠️ Troubleshooting

### Verify Token Access

\`\`\`bash
# List available slots
softhsm2-util --show-slots

# List objects in token
pkcs11-tool --module /lib/softhsm/libsofthsm2.so \\
  --token-label "${TOKEN_LABEL}" \\
  --login --pin "${PIN}" \\
  --list-objects
\`\`\`

### Test Key Operations

\`\`\`bash
# Test encryption (AES-GCM only)
echo -n "test" | pkcs11-tool --module /lib/softhsm/libsofthsm2.so \\
  --token-label "${TOKEN_LABEL}" \\
  --login --pin "${PIN}" \\
  --encrypt --mechanism AES-GCM \\
  --label "${KEY_LABEL}" \\
  --aad "01020304" \\
  --iv "00112233445566778899aabb" \\
  --tag-bits-len 128
\`\`\`

## 📚 References

- [OpenBao PKCS#11 Seal Documentation](https://openbao.org/docs/configuration/seal/pkcs11/)
- [SoftHSMv2 Documentation](https://www.opendnssec.org/softhsm/)
- [PKCS#11 Tools](https://github.com/OpenSC/OpenSC/wiki/pkcs11-tool)
EOF

	log_tree "${TREE_PIPE}${TREE_LAST}" "${GREEN}${CHECK}${NC} README.md created"
	echo "${readme_file}"
}

main() {
	echo "🔧 SoftHSM Token Generator"
	log_tree "${TREE_BRANCH}" "Configuration:"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "Directory: ${CYAN}${TOKENS_DIR}${NC}"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "Token: ${CYAN}${TOKEN_LABEL}${NC}"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "Key: ${CYAN}${KEY_LABEL}${NC}"
	log_tree "${TREE_PIPE}${TREE_LAST}" "Mechanism: ${CYAN}${MECHANISM}${NC}"

	# Ensure tokens directory exists and has correct permissions
	log_tree "${TREE_BRANCH}" "Directory Setup"
	mkdir -p "${TOKENS_DIR}"
	chmod 755 "${TOKENS_DIR}"
	log_tree "${TREE_PIPE}${TREE_LAST}" "${GREEN}${CHECK}${NC} Directory created with proper permissions"

	# Create temporary SoftHSM configuration
	TEMP_CONF=$(mktemp)
	cat >"${TEMP_CONF}" <<EOF
directories.tokendir = ${TOKENS_DIR}
objectstore.backend = file
log.level = INFO
EOF

	export SOFTHSM2_CONF="${TEMP_CONF}"

	# Generate secure random PINs
	log_tree "${TREE_BRANCH}" "Security Setup"
	PIN=$(tr </dev/urandom -cd '[:digit:]' | head -c 12)
	SO_PIN=$(tr </dev/urandom -cd '[:digit:]' | head -c 12)

	log_tree "${TREE_PIPE}${TREE_BRANCH}" "PIN: ${CYAN}${PIN}${NC}"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "SO-PIN: ${CYAN}${SO_PIN}${NC}"

	# Save PINs to files
	echo -n "${PIN}" >"${TOKENS_DIR}/pin"
	echo -n "${SO_PIN}" >"${TOKENS_DIR}/so-pin"
	chmod 600 "${TOKENS_DIR}/pin" "${TOKENS_DIR}/so-pin"
	log_tree "${TREE_PIPE}${TREE_LAST}" "${GREEN}${CHECK}${NC} PIN files created securely"

	log_tree "${TREE_BRANCH}" "Token Initialization"
	if ! softhsm2-util --init-token --free \
		--label "${TOKEN_LABEL}" \
		--pin "${PIN}" \
		--so-pin "${SO_PIN}" >/dev/null 2>&1; then
		log_tree "${TREE_PIPE}${TREE_LAST}" "${RED}${CROSS}${NC} Failed to initialize token"
		rm -f "${TEMP_CONF}"
		exit 1
	fi
	log_tree "${TREE_PIPE}${TREE_LAST}" "${GREEN}${CHECK}${NC} Token '${TOKEN_LABEL}' initialized"

	log_tree "${TREE_BRANCH}" "Key Generation (${MECHANISM})"
	case "${MECHANISM}" in
	"AES-GCM" | "aes-gcm")
		log_tree "${TREE_PIPE}${TREE_BRANCH}" "${BLUE}${ARROW}${NC} Generating AES-256-GCM key (AEAD-compatible)"
		# Create AES key with attributes compatible with GCM mode
		if ! pkcs11-tool --module /lib/softhsm/libsofthsm2.so \
			--token-label "${TOKEN_LABEL}" \
			--login --pin "${PIN}" \
			--keygen --key-type AES:32 \
			--label "${KEY_LABEL}" \
			--usage-decrypt --usage-wrap >/dev/null 2>&1; then
			log_tree "${TREE_PIPE}${TREE_LAST}" "${RED}${CROSS}${NC} Key generation failed"
			rm -f "${TEMP_CONF}"
			exit 1
		fi

		log_tree "${TREE_PIPE}${TREE_BRANCH}" "${BLUE}${ARROW}${NC} Testing AES-GCM compatibility..."
		# Test AES-GCM mechanism with the created key
		if echo -n "test" | pkcs11-tool --module /lib/softhsm/libsofthsm2.so \
			--token-label "${TOKEN_LABEL}" \
			--login --pin "${PIN}" \
			--encrypt --mechanism AES-GCM \
			--label "${KEY_LABEL}" \
			--aad "01020304" \
			--iv "00112233445566778899aabb" \
			--tag-bits-len 128 >/dev/null 2>&1; then
			log_tree "${TREE_PIPE}${TREE_LAST}" "${GREEN}${CHECK}${NC} AES-GCM mechanism verified"
		else
			log_tree "${TREE_PIPE}${TREE_LAST}" "${YELLOW}${CROSS}${NC} AES-GCM test failed (key created, OpenBao may still work)"
		fi
		;;
	"AES" | "aes")
		log_tree "${TREE_PIPE}${TREE_BRANCH}" "${YELLOW}${CROSS}${NC} Legacy AES key (may not work with OpenBao)"
		if ! pkcs11-tool --module /lib/softhsm/libsofthsm2.so \
			--token-label "${TOKEN_LABEL}" \
			--login --pin "${PIN}" \
			--keygen --key-type AES:32 \
			--label "${KEY_LABEL}" \
			--usage-decrypt >/dev/null 2>&1; then
			log_tree "${TREE_PIPE}${TREE_LAST}" "${RED}${CROSS}${NC} Key generation failed"
			rm -f "${TEMP_CONF}"
			exit 1
		fi
		log_tree "${TREE_PIPE}${TREE_LAST}" "${GREEN}${CHECK}${NC} AES key generated"
		;;
	"RSA" | "rsa")
		log_tree "${TREE_PIPE}${TREE_BRANCH}" "${BLUE}${ARROW}${NC} Generating RSA-4096 key pair"
		if ! pkcs11-tool --module /lib/softhsm/libsofthsm2.so \
			--token-label "${TOKEN_LABEL}" \
			--login --pin "${PIN}" \
			--keypairgen --key-type rsa:4096 \
			--label "${KEY_LABEL}" >/dev/null 2>&1; then
			log_tree "${TREE_PIPE}${TREE_LAST}" "${RED}${CROSS}${NC} Key generation failed"
			rm -f "${TEMP_CONF}"
			exit 1
		fi
		log_tree "${TREE_PIPE}${TREE_LAST}" "${GREEN}${CHECK}${NC} RSA key pair generated"
		;;
	*)
		log_tree "${TREE_PIPE}${TREE_LAST}" "${RED}${CROSS}${NC} Unsupported mechanism: ${MECHANISM}"
		log_error "Supported: AES-GCM (recommended), AES (legacy), RSA"
		rm -f "${TEMP_CONF}"
		exit 1
		;;
	esac

	log_tree "${TREE_BRANCH}" "Archive Creation"
	ARCHIVE_PATH="${TOKENS_DIR}/tokens.tar"

	# Create tar with only HSM token directories (UUID-named directories), excluding lock files and generation file
	if ! tar -cf "${ARCHIVE_PATH}" -C "${TOKENS_DIR}" --exclude="pin" --exclude="so-pin" --exclude="README.md" --exclude="tokens.tar" --exclude="*.secret.yaml" --exclude="*.lock" --exclude="generation" . 2>/dev/null; then
		log_tree "${TREE_PIPE}${TREE_LAST}" "${RED}${CROSS}${NC} Archive creation failed"
		rm -f "${TEMP_CONF}"
		exit 1
	fi

	log_tree "${TREE_PIPE}${TREE_LAST}" "${GREEN}${CHECK}${NC} HSM tokens archived"

	# Generate Kubernetes secret
	log_tree "${TREE_BRANCH}" "Kubernetes Integration"
	SECRET_FILE=$(generate_k8s_secret "${ARCHIVE_PATH}" "${TOKENS_DIR}/pin" "openbao-softhsm-tokens")

	# Generate README.md
	README_FILE=$(generate_readme "${ARCHIVE_PATH}" "${SECRET_FILE}")

	echo ""
	echo "🎯 Generation Complete"
	log_tree "${TREE_BRANCH}" "Summary:"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "Token: ${CYAN}${TOKEN_LABEL}${NC}"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "Key: ${CYAN}${KEY_LABEL}${NC} (${MECHANISM})"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "PIN: ${CYAN}${PIN}${NC}"
	log_tree "${TREE_PIPE}${TREE_LAST}" "Directory: ${CYAN}${TOKENS_DIR}${NC}"

	log_tree "${TREE_BRANCH}" "Generated Files:"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "📦 HSM Archive: ${CYAN}$(basename "${ARCHIVE_PATH}")${NC}"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "🔐 PIN Files: ${CYAN}pin, so-pin${NC}"
	log_tree "${TREE_PIPE}${TREE_BRANCH}" "🚀 K8s Secret: ${CYAN}$(basename "${SECRET_FILE}")${NC}"
	log_tree "${TREE_PIPE}${TREE_LAST}" "📖 Documentation: ${CYAN}$(basename "${README_FILE}")${NC}"

	if [ "${MECHANISM}" = "AES-GCM" ] || [ "${MECHANISM}" = "aes-gcm" ]; then
		echo ""
		log_success "🔐 AEAD-compatible key created - fully compatible with OpenBao!"
	fi

	echo ""
	log_tree "${TREE_LAST}" "${GREEN}▶${NC} Next step: ${CYAN}kubectl apply -f $(basename "${SECRET_FILE}")${NC}"

	# Cleanup
	rm -f "${TEMP_CONF}"
}

# Run main function with all arguments
main "$@"
