---
# Step 0: Check if required variables are defined
- name: 🔍 Check if required variables are defined
  ansible.builtin.assert:
    that:
      - proxmox_host is defined
      - proxmox_user is defined
      - (proxmox_password is defined) or (proxmox_token_id is defined and proxmox_token_secret is defined)
      - kairos_cluster_name is defined

# Step 1: Define some shared variables
- name: 🔗 Set the Kairos OS image filename
  ansible.builtin.set_fact:
    kairos_os_image_filename: "kairos-{{ kairos_distribution }}.{{ kairos_version }}-amd64.iso"
- name: 🔍 List all the Proxmox VE nodes
  community.general.proxmox_node_info:
    api_host: "{{ proxmox_host }}"
    api_user: "{{ proxmox_user }}"
    api_password: "{{ proxmox_password | default(omit) }}"
    api_token_id: "{{ proxmox_token_id | default(omit) }}"
    api_token_secret: "{{ proxmox_token_secret | default(omit) }}"
  register: pve_node_info
- name: 🔗 Set the Proxmox VE nodes
  ansible.builtin.set_fact:
    pve_nodes: "{{ pve_node_info.proxmox_nodes | map(attribute='node') | list }}"

# Step 2: Define which Proxmox VE nodes require the Kairos OS image
- name: 🔍 List all the ISO images on the Proxmox VE cluster
  community.general.proxmox_storage_contents_info:
    api_host: "{{ proxmox_host }}"
    api_user: "{{ proxmox_user }}"
    api_password: "{{ proxmox_password | default(omit) }}"
    api_token_id: "{{ proxmox_token_id | default(omit) }}"
    api_token_secret: "{{ proxmox_token_secret | default(omit) }}"

    node: "{{ item }}"
    content: iso
    storage: "{{ proxmox_iso_storage }}"
  loop: "{{ pve_nodes }}"
  register: pve_iso_list

- name: 🔍 List all the Proxmox VE nodes with the Kairos OS image available
  ansible.builtin.set_fact:
    pve_nodes_with_kairos_os_image: "{{ (pve_nodes_with_kairos_os_image | default([])) + [item.item] }}"
  loop: "{{ pve_iso_list.results }}"
  when: >-
    item.proxmox_storage_content
    | selectattr('volid', 'search', kairos_os_image_filename + "$")
    | list
    | count > 0

- name: 🔍 List all the Proxmox VE nodes requiring the Kairos OS image
  ansible.builtin.set_fact:
    pve_nodes_requiring_kairos_os_image: >-
      {{
        pve_nodes
        | difference(pve_nodes_with_kairos_os_image | default([]))
      }}

# Step 3: Download the Kairos OS image if required
- ansible.builtin.include_tasks: download-kairos-iso.yaml
  when: pve_nodes_requiring_kairos_os_image | count > 0

# Step 4: Generate the Kairos cloud-init configuration
- ansible.builtin.include_tasks: generate-cloudinit.yaml

# Step 5: Create the Kairos VMs
- ansible.builtin.include_tasks: create-pve-vm.yaml
