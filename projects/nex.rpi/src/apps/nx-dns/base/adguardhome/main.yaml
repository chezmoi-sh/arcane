---
# trunk-ignore-all(checkov/CKV_K8S_21): Namespace is managed by kustomize
# trunk-ignore-all(checkov/CKV_K8S_25): NET_BIND_SERVICE and NET_ADMIN are required for DNS
# trunk-ignore-all(checkov/CKV2_K8S_6): Network Policies are managed directly by the live configuration
# trunk-ignore-all(trivy/KSV022,trivy/KSV106): NET_BIND_SERVICE and NET_ADMIN are required for DNS
# trunk-ignore-all(trivy/KSV117): AdGuardHome is a DNS server and I prefer to configure it like it was hosted on a dedicated machine
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: adguardhome-server
    app.kubernetes.io/name: adguardhome
    app.kubernetes.io/version: v0.107.52
  name: adguardhome
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: adguardhome-server
      app.kubernetes.io/name: adguardhome
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: adguardhome-server
        app.kubernetes.io/name: adguardhome
    spec:
      shareProcessNamespace: true
      automountServiceAccountToken: false
      containers:
        - image: adguard/adguardhome:v0.107.52@sha256:d16cc7517ab96f843e7f8bf8826402dba98f5e6b175858920296243332391589
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            tcpSocket:
              port: dns-tcp
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          name: adguardhome
          ports:
            - containerPort: 3000
              name: web
              protocol: TCP
            - containerPort: 53
              name: dns
              protocol: UDP
            - containerPort: 53
              name: dns-tcp
              protocol: TCP
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /control/status
              port: web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: '1'
              memory: 256Mi
            requests:
              cpu: 10m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
                - NET_ADMIN
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 32453
            runAsGroup: 41984
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            failureThreshold: 15
            httpGet:
              path: /control/status
              port: web
              scheme: HTTP
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
            - name: adguardhome-data
              mountPath: /opt/adguardhome/conf
              subPath: conf
            - name: adguardhome-data
              mountPath: /opt/adguardhome/work
              subPath: work
      enableServiceLinks: false
      securityContext:
        fsGroup: 41984
        runAsUser: 32453
        runAsNonRoot: true
        runAsGroup: 41984
      volumes:
        - name: adguardhome-data
          persistentVolumeClaim:
            claimName: adguardhome-perstistent
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/instance: adguardhome-server
    app.kubernetes.io/name: adguardhome
    app.kubernetes.io/version: v0.107.52
  name: adguardhome-bootstrap
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: adguardhome-bootstrap
        app.kubernetes.io/name: adguardhome
        app.kubernetes.io/version: v0.107.52
    spec:
      automountServiceAccountToken: false
      containers:
        - command: [/bin/sh]
          args:
            - -c
            - |
              set -x

              mkdir -p /opt/adguardhome/_/work /opt/adguardhome/_/conf
              if [ ! -f /opt/adguardhome/_/conf/AdGuardHome.yaml ]; then
                cp /srv/conf/AdGuardHome.yaml /opt/adguardhome/_/conf/AdGuardHome.yaml
              fi
              /opt/adguardhome/AdGuardHome --check-config --config /opt/adguardhome/_/conf/AdGuardHome.yaml
          image: adguard/adguardhome:v0.107.52@sha256:d16cc7517ab96f843e7f8bf8826402dba98f5e6b175858920296243332391589
          imagePullPolicy: Always
          name: adguardhome-bootstrap
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
                - NET_ADMIN
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 32453
            runAsGroup: 41984
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: adguardhome-data
              mountPath: /opt/adguardhome/_
            - name: adguardhome-config
              mountPath: /srv/conf
      enableServiceLinks: false
      restartPolicy: Never
      securityContext:
        fsGroup: 41984
        runAsUser: 32453
        runAsNonRoot: true
        runAsGroup: 41984
      volumes:
        - name: adguardhome-data
          persistentVolumeClaim:
            claimName: adguardhome-perstistent
        - name: adguardhome-config
          configMap:
            name: adguardhome-bootstrap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: adguardhome-bootstrap
data:
  AdGuardHome.yaml: |
    http:
      address: 0.0.0.0:3000
    theme: auto
    dns:
      bind_hosts:
        - 0.0.0.0
      port: 53
      upstream_dns:
        - https://dns10.quad9.net/dns-query
        - tls://dns10.quad9.net
        - https://dns11.quad9.net/dns-query
        - tls://dns11.quad9.net
        - https://security.cloudflare-dns.com/dns-query
      bootstrap_dns:
        - 9.9.9.10
        - 149.112.112.10
        - 2620:fe::10
        - 2620:fe::fe:10
      fallback_dns:
        - 9.9.9.11
        - 9.9.9.10
        - 1.1.1.1
        - 149.112.112.10
      blocked_hosts:
        - version.bind
        - id.server
        - hostname.bind
      trusted_proxies:
        - 10.42.0.0/16 # k3s pod CIDR
        - 127.0.0.0/8
        - ::1/128
    tls:
      enabled: false
      allow_unencrypted_doh: true
    dhcp:
      enabled: false
    schema_version: 28
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: adguardhome-server
    app.kubernetes.io/name: adguardhome
    app.kubernetes.io/version: v0.107.52
  name: adguardhome-perstistent
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: adguardhome-server
    app.kubernetes.io/name: adguardhome
    app.kubernetes.io/version: v0.107.52
  name: adguardhome
spec:
  ports:
    - name: web
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/instance: adguardhome-server
    app.kubernetes.io/name: adguardhome
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: adguardhome-server
    app.kubernetes.io/name: adguardhome
    app.kubernetes.io/version: v0.107.52
  name: adguardhome-dns
spec:
  externalTrafficPolicy: Local
  ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
  selector:
    app.kubernetes.io/instance: adguardhome-server
    app.kubernetes.io/name: adguardhome
  type: LoadBalancer
