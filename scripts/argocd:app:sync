#!/usr/bin/env bash
# trunk-ignore-all(shellcheck/SC2155): don't care about masking value
# trunk-ignore-all(shellcheck/SC2312): don't care about masking return value

set -euo pipefail

# ===== CONFIGURATION =====
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Path pattern for parsing project structure
readonly PATH_REGEX='^projects/([^/]+)/src/(apps|infrastructure/kubernetes)/(.+)$'
readonly YAML_PATH_REGEX='^projects/([^/]+)/src/(apps|infrastructure/kubernetes)/(.+)\.ya?ml$'

# ===== UTILITY FUNCTIONS =====
# Check if required tools are available
check_dependencies() {
	local missing_tools=()

	for tool in "$@"; do
		if ! command -v "${tool}" &>/dev/null; then
			missing_tools+=("${tool}")
		fi
	done

	if [[ ${#missing_tools[@]} -gt 0 ]]; then
		gum log --structured --level error "Missing required tools: ${missing_tools[*]}. Please install them to continue."
		exit 1
	fi
}

# Check if we're in a git repository
check_git_repo() {
	if ! git rev-parse --git-dir &>/dev/null; then
		gum log --structured --level error "You must be in a Git repository."
		exit 1
	fi
}

# Get current git branch
get_current_branch() {
	local branch
	branch="$(git rev-parse --abbrev-ref HEAD)"

	if [[ ${branch} == "HEAD" ]]; then
		branch="$(git rev-parse HEAD)"
		gum log --structured --level warn "In detached mode, using SHA: ${branch}"
	fi

	gum log --structured --level info "Current branch: ${branch}"
	echo "${branch}"
}

# Normalize a path relative to the project root
normalize_path() {
	local path="$1"
	local original_path="${path}"

	# Handle current directory and relative paths
	case "${path}" in
	".")
		path="$(pwd)"
		;;
	/*)
		# Already absolute path
		;;
	*)
		# Relative path - convert to absolute
		path="$(realpath "${path}" 2>/dev/null || echo "${PWD}/${path}")"
		;;
	esac

	# Validate path exists
	if [[ ! -e ${path} ]]; then
		gum log --structured --level error "Path '${original_path}' does not exist."
		exit 1
	fi

	# Normalize path relative to project root
	path="$(realpath --relative-to="${PROJECT_ROOT}" "${path}" 2>/dev/null || echo "${path}")"

	# Strip project root if still absolute
	path="${path#"${PROJECT_ROOT}"/}"

	echo "${path}"
}

# Parse a YAML file path and extract cluster/app information
parse_yaml_path() {
	local yaml_path
	yaml_path="$(normalize_path "$1")"

	# Validate it's a YAML file
	if [[ ! ${yaml_path} =~ \.(yaml|yml)$ ]]; then
		gum log --structured --level error "File '$1' is not a YAML file."
		exit 1
	fi

	# Parse format: projects/<cluster>/src/<type>/<app>/<file>.yaml
	if [[ ! ${yaml_path} =~ ${YAML_PATH_REGEX} ]]; then
		gum log --structured --level error "Invalid path format. Expected: projects/<cluster>/src/apps/<app>/<file>.yaml"
		gum log --structured --level error "Or: projects/<cluster>/src/infrastructure/kubernetes/<app>/<file>.yaml"
		gum log --structured --level error "Resolved path: '${yaml_path}'"
		gum log --structured --level error "Current directory: $(pwd), Project root: ${PROJECT_ROOT}"
		exit 1
	fi

	export YAML_PATH="${yaml_path}"
	export CLUSTER_NAME="${BASH_REMATCH[1]}"
	export APP_TYPE="${BASH_REMATCH[2]}"
	export APP_PATH="${BASH_REMATCH[3]}"

	gum log --structured --level info "YAML file parsed:"
	gum log --structured --level info "  File: ${yaml_path}"
	gum log --structured --level info "  Cluster: ${CLUSTER_NAME}"
	gum log --structured --level info "  Type: ${APP_TYPE}"
	gum log --structured --level info "  App Path: ${APP_PATH}"
}

# Parse an application directory path and extract cluster/app information
parse_app_path() {
	local app_path
	app_path="$(normalize_path "$1")"

	# Validate it's a directory
	if [[ ! -d "${PROJECT_ROOT}/${app_path}" ]]; then
		gum log --structured --level error "Path '$1' is not a directory."
		exit 1
	fi

	# Parse format: projects/<cluster>/src/<type>/<app>
	if [[ ! ${app_path} =~ ${PATH_REGEX} ]]; then
		gum log --structured --level error "Invalid path format. Expected: projects/<cluster>/src/apps/<app>"
		gum log --structured --level error "Or: projects/<cluster>/src/infrastructure/kubernetes/<app>"
		gum log --structured --level error "Resolved path: '${app_path}'"
		gum log --structured --level error "Current directory: $(pwd), Project root: ${PROJECT_ROOT}"
		exit 1
	fi

	local cluster="${BASH_REMATCH[1]}"
	local app_type="${BASH_REMATCH[2]}"
	local app_name="${BASH_REMATCH[3]#\*}" # Remove '*' prefix if exists
	local app_project="system"

	# Set project based on app type
	[[ ${app_type} != "infrastructure/kubernetes" ]] && app_project="applications"

	export APP_PATH="${app_path}"
	export CLUSTER_NAME="${cluster}"
	export APP_NAME="${app_name}"
	export APP_PROJECT="${app_project}"
	export APP_TYPE="${app_type}"

	gum log --structured --level info "Application parsed:"
	gum log --structured --level info "  Cluster: ${CLUSTER_NAME}"
	gum log --structured --level info "  Application: ${APP_NAME}"
	gum log --structured --level info "  Project: ${APP_PROJECT}"
	gum log --structured --level info "  Type: ${APP_TYPE}"
}

# Determine the appropriate Kubernetes context
determine_context() {
	local cluster_name="$1"

	if [[ -z ${cluster_name} ]]; then
		gum log --structured --level error "Cluster name is required"
		exit 1
	fi

	local context=""

	# Use provided context if available
	if [[ -n ${KUBE_CONTEXT-} ]]; then
		context="${KUBE_CONTEXT}"
		gum log --structured --level info "Using environment context: ${context}"
	else
		# Try to derive context from cluster name
		local available_contexts
		available_contexts=$(kubectl config get-contexts -o name 2>/dev/null || echo "")

		if [[ -n ${available_contexts} ]]; then
			# Look for exact match first
			if echo "${available_contexts}" | grep -q "^${cluster_name}$"; then
				context="${cluster_name}"
				gum log --structured --level info "Found exact context match: ${context}"
			else
				# Look for partial match
				local partial_match
				partial_match=$(echo "${available_contexts}" | grep "${cluster_name}" | head -1)
				if [[ -n ${partial_match} ]]; then
					context="${partial_match}"
					gum log --structured --level info "Found partial context match: ${context}"
				else
					# Let user choose interactively
					gum style --border normal --margin "1" --padding "1" --border-foreground 212 "Select Kubernetes Context"
					context=$(echo "${available_contexts}" | gum choose --header "Select the Kubernetes context to use")
					if [[ -z ${context} ]]; then
						gum log --structured --level error "No context selected. Aborting."
						exit 1
					fi
				fi
			fi
		else
			gum log --structured --level error "No Kubernetes contexts available. Please configure kubectl."
			exit 1
		fi
	fi

	echo "${context}"
}

# Generate application deployment namespace
generate_dest_namespace() {
	local app_type="$1"
	local app_name="$2"
	local cluster_name="$3"

	if [[ ${app_type} == "infrastructure/kubernetes" ]]; then
		echo "${app_name}-system"
	else
		echo "${cluster_name//\./-}"
	fi
}

# Parse a file path and return Kubernetes context and application namespace
get_context_and_namespace_from_file() {
	local file_path="$1"

	# Handle both YAML files and directories
	if [[ -f ${file_path} ]]; then
		parse_yaml_path "${file_path}"
		# For YAML files, derive app name from the path structure
		local app_name
		app_name=$(basename "$(dirname "${APP_PATH}")")
	else
		parse_app_path "${file_path}"
		local app_name="${APP_NAME}"
	fi

	# Determine context
	local context
	context=$(determine_context "${CLUSTER_NAME}")

	# Generate application namespace
	local app_namespace
	app_namespace=$(generate_dest_namespace "${APP_TYPE}" "${app_name}" "${CLUSTER_NAME}")

	echo "${context} ${app_namespace}"
}

# ===== ARGOCD-SPECIFIC CONFIGURATION =====
readonly ARGOCD_CLI="argocd"
readonly REPO_URL="https://github.com/chezmoidotsh/arcane.git"
readonly DEFAULT_DEST_SERVER="https://kubernetes.default.svc"
readonly SYNC_TIMEOUT=300

# Application path patterns
readonly HOSTNAME_REGEX='[a-zA-Z0-9.-]*\.[a-zA-Z0-9.-]*\.[a-zA-Z]*'
readonly ARGOCD_REGEX='argocd\.[a-zA-Z0-9.-]*\.[a-zA-Z]*'

# Common ArgoCD URL patterns
readonly -a COMMON_URL_PATTERNS=(
	'https://argocd.$CLUSTER_NAME.chezmoi.sh' # trunk-ignore(shellcheck/SC2016): this is on purpose
	"https://argocd.akn.chezmoi.sh"
	"https://argocd.chezmoi.sh"
)

# ===== USAGE =====
usage() {
	cat <<'EOF'
Usage: argocd:app:sync [OPTIONS] <app-path>

Synchronize an ArgoCD application automatically.

Arguments:
  app-path    Path to the application directory
              Format: projects/<cluster>/src/apps/<application>
              Format: projects/<cluster>/src/infrastructure/kubernetes/<app>

Options:
  --reset     Reset application to main branch instead of current branch
  --show      Show application information without making changes
  -h, --help  Show this help message

Examples:
  argocd:app:sync projects/amiya.akn/src/apps/home-dashboard
  argocd:app:sync --reset projects/amiya.akn/src/apps/home-dashboard
  argocd:app:sync --show projects/maison/src/infrastructure/kubernetes/cert-manager
  argocd:app:sync .                    # Use current directory (if in app directory)
  argocd:app:sync --show .             # Show info for current directory app

Optional environment variables:
  ARGOCD_SERVER       ArgoCD server URL to use
EOF
}

# ===== ARGOCD-SPECIFIC FUNCTIONS =====
# Generate ArgoCD application namespace from cluster name
# Usage: generate_app_namespace <cluster-name>
generate_app_namespace() {
	local cluster_name="$1"
	echo "${cluster_name//\./-}"
}

# Parse a file path and return ArgoCD application information
# Usage: get_argocd_info_from_file <file-path>
# Returns: namespace app_name app_project (space-separated)
get_argocd_info_from_file() {
	local file_path="$1"

	# Handle both YAML files and directories
	if [[ -f ${file_path} ]]; then
		parse_yaml_path "${file_path}"
		# For YAML files, derive app name from the path structure
		local app_name=$(basename "$(dirname "${APP_PATH}")")
	else
		parse_app_path "${file_path}"
		local app_name="${APP_NAME}"
	fi

	local app_namespace
	app_namespace=$(generate_app_namespace "${CLUSTER_NAME}")

	local app_project="system"
	[[ ${APP_TYPE} != "infrastructure/kubernetes" ]] && app_project="applications"

	echo "${app_namespace} ${app_name} ${app_project}"
}

preflight_checks() {
	check_dependencies argocd gum git
	check_git_repo
}

search_argocd_in_files() {
	local search_pattern="$1"
	local file_pattern="$2"

	for file in ${file_pattern}; do
		[[ -f ${file} ]] || continue
		local server
		server=$(grep -A 10 "hostnames:" "${file}" 2>/dev/null | grep -o "${search_pattern}" | head -1 ||
			grep -o "${search_pattern}" "${file}" 2>/dev/null | head -1)
		if [[ -n ${server} ]]; then
			echo "${server}"
			return 0
		fi
	done
	return 1
}

detect_argocd_server() {
	local server=""
	local cluster_name="$1"

	# Search in current cluster's ArgoCD configuration
	server=$(search_argocd_in_files "${HOSTNAME_REGEX}" "${PROJECT_ROOT}/projects/${cluster_name}/src/apps/*argocd/argocd.httproute.yaml")
	[[ -n ${server} ]] && {
		echo "${server}"
		return 0
	}

	server=$(search_argocd_in_files "${ARGOCD_REGEX}" "${PROJECT_ROOT}/projects/${cluster_name}/src/apps/*argocd/*ingress*.yaml")
	[[ -n ${server} ]] && {
		echo "${server}"
		return 0
	}

	# Search in other projects
	for project_dir in "${PROJECT_ROOT}/projects"/*; do
		[[ -d "${project_dir}/src/apps" ]] || continue

		server=$(search_argocd_in_files "${HOSTNAME_REGEX}" "${project_dir}/src/apps/*argocd/argocd.httproute.yaml")
		[[ -n ${server} ]] && {
			echo "${server}"
			return 0
		}
	done

	# Test common URL patterns
	for pattern in "${COMMON_URL_PATTERNS[@]}"; do
		local url="${pattern/\$CLUSTER_NAME/${cluster_name}}"
		local hostname="${url#https://}"
		if curl -s -k --connect-timeout 5 "${url}" >/dev/null 2>&1; then
			echo "${hostname}"
			return 0
		fi
	done

	return 1
}

handle_argocd_auth() {
	local cluster_name="$1"

	gum log --structured --level info "Checking ArgoCD authentication..."

	# Check if already authenticated
	local auth_info
	if auth_info=$(${ARGOCD_CLI} account get-user-info --grpc-web 2>/dev/null) &&
		echo "${auth_info}" | grep -q "Logged In: true"; then
		gum log --structured --level info --prefix "✓" "Already authenticated with ArgoCD"
		return 0
	fi

	# Use environment server if available
	if [[ -n ${ARGOCD_SERVER-} ]]; then
		gum log --structured --level info "Using environment server: ${ARGOCD_SERVER}"
		gum log --structured --level info "Authenticating with SSO..."
		${ARGOCD_CLI} login "${ARGOCD_SERVER}" --sso --grpc-web
		return 0
	fi

	# Auto-detect ArgoCD server
	gum log --structured --level info "Auto-detecting ArgoCD server..."
	local argocd_server
	if argocd_server="$(detect_argocd_server "${cluster_name}")"; then # trunk-ignore(shellcheck/SC2310): this is mandatory to fix SC2118
		gum log --structured --level info "ArgoCD server detected: ${argocd_server}"
		gum log --structured --level info "Authenticating with SSO..."
		${ARGOCD_CLI} login "${argocd_server}" --sso --grpc-web
	else
		gum log --structured --level error "Unable to auto-detect ArgoCD server. Set ARGOCD_SERVER or connect manually."
		exit 1
	fi
}

verify_cluster_exists() {
	local cluster_name="$1"

	gum log --structured --level info "Verifying cluster '${cluster_name}' exists..."

	local clusters_info
	if ! clusters_info=$(${ARGOCD_CLI} cluster list -o wide --grpc-web 2>/dev/null); then
		gum log --structured --level error "Unable to list ArgoCD clusters. Check your authentication."
		exit 1
	fi

	local cluster_server=""
	while IFS= read -r line; do
		local line_name=$(echo "${line}" | awk '{print $2}')
		if [[ ${line_name} == "${cluster_name}" ]]; then
			cluster_server=$(echo "${line}" | awk '{print $1}')
			break
		fi
	done <<<"${clusters_info}"

	if [[ -n ${cluster_server} ]]; then
		gum log --structured --level info --prefix "✓" "Cluster '${cluster_name}' found in ArgoCD"
		echo "${cluster_server}"
	else
		gum log --structured --level error "Cluster '${cluster_name}' not found in ArgoCD."
		gum log --structured --level error "Available clusters:"
		echo "${clusters_info}" | sed 's/^/  /' # trunk-ignore(shellcheck/SC2001): multiline indentation requires sed
		exit 1
	fi
}

check_app_exists() {
	local app_full_name="$1"

	gum log --structured --level info "Checking if application '${app_full_name}' exists..."

	if ${ARGOCD_CLI} app get "${app_full_name}" --grpc-web &>/dev/null; then
		gum log --structured --level info "Application '${app_full_name}' already exists"
		return 0
	else
		gum log --structured --level info "Application '${app_full_name}' does not exist, creation needed"
		return 1
	fi
}

create_application() {
	local app_name="$1"
	local app_full_name="$2"
	local app_project="$3"
	local app_path="$4"
	local branch="$5"
	local cluster_server="$6"
	local dest_namespace="$7"

	gum log --structured --level info "Creating application '${app_name}'..."

	gum log --structured --level info "Application parameters:"
	gum log --structured --level info "  Name: ${app_name}"
	gum log --structured --level info "  Project: ${app_project}"
	gum log --structured --level info "  Repository: ${REPO_URL}"
	gum log --structured --level info "  Path: ${app_path}"
	gum log --structured --level info "  Branch: ${branch}"
	gum log --structured --level info "  Cluster: ${cluster_server}"
	gum log --structured --level info "  Namespace: ${dest_namespace}"

	${ARGOCD_CLI} app create "${app_full_name}" \
		--repo "${REPO_URL}" \
		--path "${app_path}" \
		--dest-server "${cluster_server}" \
		--dest-namespace "${dest_namespace}" \
		--project "${app_project}" \
		--revision "${branch}" \
		--sync-policy automated \
		--auto-prune \
		--self-heal \
		--sync-option CreateNamespace=true \
		--sync-option ServerSideApply=true \
		--grpc-web

	gum log --structured --level info --prefix "✓" "Application '${app_full_name}' created"
}

update_application() {
	local app_full_name="$1"
	local branch="$2"

	gum log --structured --level info "Updating application '${app_full_name}' to branch '${branch}'..."

	# Try simple revision update first, fallback to source position for multi-source apps
	if ! ${ARGOCD_CLI} app set "${app_full_name}" --revision "${branch}" --grpc-web 2>/dev/null; then
		gum log --structured --level info "Application has multiple sources, updating first source..."
		${ARGOCD_CLI} app set "${app_full_name}" --source-position 1 --revision "${branch}" --grpc-web
	fi

	gum log --structured --level info --prefix "✓" "Application '${app_full_name}' updated"
}

sync_and_wait() {
	local app_full_name="$1"

	gum log --structured --level info "Syncing application '${app_full_name}'..."
	${ARGOCD_CLI} app sync "${app_full_name}" --prune --force --grpc-web --output tree=detailed --preview-changes
	gum log --structured --level info --prefix "✓" "Application '${app_full_name}' synced"

	gum log --structured --level info "Waiting for sync to complete..."
	${ARGOCD_CLI} app wait "${app_full_name}" --timeout "${SYNC_TIMEOUT}" --grpc-web --output tree
	gum log --structured --level info --prefix "✓" "Sync completed"
}

show_application_info() {
	local app_name="$1"
	local cluster_name="$2"
	local app_namespace="$3"
	local app_full_name="${app_namespace}/${app_name}"

	gum log --structured --level info "Application information:"
	gum log --structured --level info "  Cluster: ${cluster_name}"
	gum log --structured --level info "  Application: ${app_name}"
	gum log --structured --level info "  Full name: ${app_full_name}"
	gum log --structured --level info "  Namespace: ${app_namespace}"

	echo
	if ${ARGOCD_CLI} app get "${app_full_name}" --grpc-web &>/dev/null; then
		${ARGOCD_CLI} app get "${app_full_name}" --grpc-web --output tree
	else
		gum log --structured --level error "Application '${app_full_name}' does not exist in ArgoCD"
	fi
}

# ===== ARGUMENT PARSING =====
parse_arguments() {
	local reset_mode=false
	local show_mode=false
	local app_path=""

	while [[ $# -gt 0 ]]; do
		case $1 in
		--reset)
			reset_mode=true
			shift
			;;
		--show)
			show_mode=true
			shift
			;;
		-h | --help)
			usage
			exit 0
			;;
		-*)
			gum log --structured --level error "Unknown option: $1"
			usage
			exit 1
			;;
		*)
			if [[ -n ${app_path} ]]; then
				gum log --structured --level error "Multiple paths provided. Only one path is allowed."
				exit 1
			fi
			app_path="$1"
			shift
			;;
		esac
	done

	# Validate arguments
	if [[ -z ${app_path} ]]; then
		gum log --structured --level error "Application path is required."
		exit 1
	fi
	if [[ ${reset_mode} == "true" && ${show_mode} == "true" ]]; then
		gum log --structured --level error "Cannot use --reset and --show together."
		exit 1
	fi

	export RESET_MODE="${reset_mode}"
	export SHOW_MODE="${show_mode}"
	export APP_PATH_ARG="${app_path}"
}

# ===== MAIN FUNCTION =====
main() {
	parse_arguments "$@"
	preflight_checks

	# Get ArgoCD info from file
	local argocd_namespace app_name app_project
	read -r argocd_namespace app_name app_project < <(get_argocd_info_from_file "${APP_PATH_ARG}")

	# Get context and namespace info
	local context dest_namespace
	read -r context dest_namespace < <(get_context_and_namespace_from_file "${APP_PATH_ARG}")

	# Parse additional info from path - use parse_app_path to get cluster info
	parse_app_path "${APP_PATH_ARG}"
	local cluster_name="${CLUSTER_NAME}"
	local app_path="${APP_PATH}"

	local app_full_name="${argocd_namespace}/${app_name}"

	# ===== INFORMATION SUMMARY =====
	gum log --structured --level info "App: ${app_name} (${argocd_namespace})"
	gum log --structured --level info "Project: ${app_project}"
	gum log --structured --level info "Source: ${app_path}"
	gum log --structured --level info "Destination context: ${context}"
	gum log --structured --level info "Destination namespace: ${dest_namespace}"

	# Confirm action
	if ! gum confirm "Sync ArgoCD application '${app_full_name}'?"; then
		gum log --structured --level info "Operation cancelled by user"
		return
	fi

	# ===== GET CURRENT BRANCH =====
	local branch
	branch="$(get_current_branch)"

	# Main workflow
	handle_argocd_auth "${cluster_name}"
	local cluster_server
	cluster_server="$(verify_cluster_exists "${cluster_name}")"

	if check_app_exists "${app_full_name}"; then # trunk-ignore(shellcheck/SC2310): this is mandatory to fix SC2118
		update_application "${app_full_name}" "${branch}"
	else
		create_application "${app_name}" "${app_full_name}" "${app_project}" "${app_path}" "${branch}" "${cluster_server:-${DEFAULT_DEST_SERVER}}" "${dest_namespace}"
	fi

	sync_and_wait "${app_full_name}"

	gum log --structured --level info --prefix "✓" "Synchronization completed successfully!"
}

# Execute if script is called directly
if [[ ${BASH_SOURCE[0]} == "${0}" ]]; then
	main "$@"
fi
