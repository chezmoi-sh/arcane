---
description: Theses rules define how the agent should commit changes
globs: 
alwaysApply: false
---
<rule>
  <meta>
    <title>Git Commit Rules for Arcane Infrastructure Project</title>
    <description>Comprehensive guidelines for creating standardized Git commits in the Arcane multi-cluster infrastructure project</description>
    <created-at utc-timestamp="1744157700">April 9, 2025, 10:15 AM AEST</created-at>
    <last-updated-at utc-timestamp="1744240920">April 10, 2025, 09:22 AM AEST</last-updated-at>
    <applies-to>
      <file-matcher glob="*">All files in the Arcane project</file-matcher>
      <action-matcher action="commit">Triggered when creating Git commits</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>Follow the exact commit message format: emoji(scope): description with required signoff</description>
      <examples>
        <example title="Commit Message Structure">
          <correct-example title="Proper commit format" conditions="Creating a new commit" expected-result="Valid commit message" correctness-criteria="Follows emoji(scope): description format with signoff">:sparkles:(project:amiya.akn): add new monitoring dashboard</correct-example>
          <incorrect-example title="Missing emoji and scope" conditions="Creating a new commit" expected-result="Valid commit message" incorrectness-criteria="Lacks required emoji and scope">add new dashboard</incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <non-negotiable priority="critical">
      <description>Always use signoff flag (-s) and GPG signature (-S) when committing for security and authenticity</description>
      <examples>
        <example title="Signoff and GPG Requirement">
          <correct-example title="With signoff and GPG" conditions="Creating a commit" expected-result="Signed and GPG-signed commit" correctness-criteria="Includes both -s and -S flags">git commit -S -s -m ":sparkles:(project:amiya.akn): add monitoring dashboard"</correct-example>
          <incorrect-example title="Without signatures" conditions="Creating a commit" expected-result="Signed commit" incorrectness-criteria="Missing signoff and GPG flags">git commit -m ":sparkles:(project:amiya.akn): add dashboard"</incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="critical">
      <description>Use Gitmoji semantic emojis that clearly communicate the type of change being made (synchronized with .commitlintrc.js)</description>
      <examples>
        <example title="Core Gitmoji Types">
          <correct-example title="New features" conditions="Introducing new functionality" expected-result="Appropriate emoji" correctness-criteria="Uses :sparkles: for new features">:sparkles:(project:amiya.akn): add prometheus alerting rules</correct-example>
          <correct-example title="Bug fixes" conditions="Fixing a defect" expected-result="Appropriate emoji" correctness-criteria="Uses :bug: for bug fixes">:bug:(catalog:fluxcd): fix cert-manager helm values</correct-example>
          <correct-example title="Documentation" conditions="Adding or updating docs" expected-result="Appropriate emoji" correctness-criteria="Uses :memo: for documentation">:memo:(project:sof.akn): add bootstrap documentation</correct-example>
          <correct-example title="Project initiation" conditions="Starting new project/feature" expected-result="Appropriate emoji" correctness-criteria="Uses :tada: for initiation">:tada:(project:sof.akn): initiate new infrastructure project</correct-example>
          <correct-example title="Dependencies upgrade" conditions="Upgrading dependencies" expected-result="Appropriate emoji" correctness-criteria="Uses :arrow_up: for dependency upgrades">:arrow_up:(project:amiya.akn): update helm release argo-cd to v8.1.0</correct-example>
          <correct-example title="Dependencies downgrade" conditions="Downgrading dependencies" expected-result="Appropriate emoji" correctness-criteria="Uses :arrow_down: for dependency downgrades">:arrow_down:(project:maison): downgrade nodejs version due to compatibility</correct-example>
          <correct-example title="Performance improvement" conditions="Optimizing performance" expected-result="Appropriate emoji" correctness-criteria="Uses :zap: for performance">:zap:(catalog:fluxcd): optimize prometheus query performance</correct-example>
          <correct-example title="Security fixes" conditions="Fixing security/privacy issues" expected-result="Appropriate emoji" correctness-criteria="Uses :lock: for security">:lock:(project:amiya.akn): tighten service account permissions</correct-example>
          <correct-example title="Configuration changes" conditions="Updating config files" expected-result="Appropriate emoji" correctness-criteria="Uses :wrench: for configuration">:wrench:(catalog:fluxcd): update traefik ingress configuration</correct-example>
          <correct-example title="Infrastructure changes" conditions="Infrastructure related changes" expected-result="Appropriate emoji" correctness-criteria="Uses :bricks: for infrastructure">:bricks:(catalog:ansible): update PVE cluster configuration</correct-example>
          <incorrect-example title="Wrong emoji for feature" conditions="Adding new functionality" expected-result="Appropriate emoji" incorrectness-criteria="Uses wrong emoji for type">:bug:(project:amiya.akn): add new monitoring dashboard</incorrect-example>
        </example>
        <example title="Specialized Gitmoji Types">
          <correct-example title="Critical hotfix" conditions="Emergency fix" expected-result="Appropriate emoji" correctness-criteria="Uses :ambulance: for critical hotfix">:ambulance:(project:amiya.akn): fix critical authentication bypass</correct-example>
          <correct-example title="Breaking changes" conditions="Introducing breaking changes" expected-result="Appropriate emoji" correctness-criteria="Uses :boom: for breaking changes">:boom:(catalog:crossplane): change API structure for providers</correct-example>
          <correct-example title="Code refactoring" conditions="Restructuring code" expected-result="Appropriate emoji" correctness-criteria="Uses :recycle: for refactoring">:recycle:(project:maison): restructure application deployment manifests</correct-example>
          <correct-example title="Remove code/files" conditions="Removing code or files" expected-result="Appropriate emoji" correctness-criteria="Uses :fire: for removal">:fire:(project:shodan.akn): remove deprecated monitoring stack</correct-example>
          <correct-example title="CI/CD fixes" conditions="Fixing CI build" expected-result="Appropriate emoji" correctness-criteria="Uses :green_heart: for CI fixes">:green_heart:(gh): fix workflow permissions for renovate</correct-example>
          <correct-example title="Add/update assets" conditions="Adding or updating assets" expected-result="Appropriate emoji" correctness-criteria="Uses :bento: for assets">:bento:(project:amiya.akn): update architecture diagram icons</correct-example>
          <correct-example title="Release/Version tags" conditions="Creating release" expected-result="Appropriate emoji" correctness-criteria="Uses :bookmark: for releases">:bookmark:(project:maison): release v2.1.0</correct-example>
          <correct-example title="Move/rename resources" conditions="Moving or renaming files" expected-result="Appropriate emoji" correctness-criteria="Uses :truck: for moving">:truck:(catalog:fluxcd): reorganize helm chart structure</correct-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>Use exact scope format based on .commitlintrc.js configuration (synchronized with allowed scopes)</description>
      <examples>
        <example title="Catalog Scopes">
          <correct-example title="Ansible role catalog" conditions="Modifying catalog/ansible/" expected-result="Valid catalog scope" correctness-criteria="Uses catalog:ansible scope">:sparkles:(catalog:ansible): add new PVE cluster provisioning role</correct-example>
          <correct-example title="Crossplane resource catalog" conditions="Modifying catalog/crossplane/" expected-result="Valid catalog scope" correctness-criteria="Uses catalog:crossplane scope">:wrench:(catalog:crossplane): update AWS provider configuration</correct-example>
          <correct-example title="Nix flakes catalog" conditions="Modifying catalog/flakes/" expected-result="Valid catalog scope" correctness-criteria="Uses catalog:flakes scope">:arrow_up:(catalog:flakes): update chezmoi.sh yaldap flake dependencies</correct-example>
          <correct-example title="Kustomize component catalog" conditions="Modifying catalog/kustomize/" expected-result="Valid catalog scope" correctness-criteria="Uses catalog:kustomize scope">:bento:(catalog:kustomize): add tun-device-plugin daemonset</correct-example>
          <correct-example title="Kairos bundle catalog" conditions="Modifying catalog/kairos-bundles/" expected-result="Valid catalog scope" correctness-criteria="Uses catalog:kairos-bundle scope">:wrench:(catalog:kairos-bundle): update flux-sync service configuration</correct-example>
          <incorrect-example title="Wrong catalog scope" conditions="Modifying catalog files" expected-result="Exact catalog scope" incorrectness-criteria="Uses incorrect scope format">:sparkles:(ansible): add new role</incorrect-example>
          <incorrect-example title="Too generic catalog scope" conditions="Modifying specific catalog" expected-result="Specific catalog scope" incorrectness-criteria="Missing catalog subcategory">:wrench:(catalog): update configuration</incorrect-example>
        </example>
        <example title="Project Scopes">
          <correct-example title="Amiya.akn project" conditions="Modifying projects/amiya.akn/" expected-result="Valid project scope" correctness-criteria="Uses project:amiya.akn scope">:sparkles:(project:amiya.akn): add prometheus servicemonitor for api metrics</correct-example>
          <correct-example title="Chezmoi.sh project" conditions="Modifying projects/chezmoi.sh/" expected-result="Valid project scope" correctness-criteria="Uses project:chezmoi.sh scope">:wrench:(project:chezmoi.sh): update crossplane AWS provider configuration</correct-example>
          <correct-example title="Home Assistant project" conditions="Modifying projects/hass/" expected-result="Valid project scope" correctness-criteria="Uses project:hass scope">:lock:(project:hass): tighten cloudflare IAM permissions</correct-example>
          <correct-example title="Maison project" conditions="Modifying projects/maison/" expected-result="Valid project scope" correctness-criteria="Uses project:maison scope">:sparkles:(project:maison): add jellyfin media server deployment</correct-example>
          <correct-example title="Shodan.akn project" conditions="Modifying projects/shodan.akn/" expected-result="Valid project scope" correctness-criteria="Uses project:shodan.akn scope">:memo:(project:shodan.akn): add architecture documentation</correct-example>
          <correct-example title="Sof.akn project" conditions="Modifying projects/sof.akn/" expected-result="Valid project scope" correctness-criteria="Uses project:sof.akn scope">:tada:(project:sof.akn): initiate 'Spirit of Fire' infrastructure project</correct-example>
          <incorrect-example title="Missing project prefix" conditions="Modifying project files" expected-result="Valid project scope" incorrectness-criteria="Missing project: prefix">:sparkles:(amiya.akn): add kubernetes manifests</incorrect-example>
          <incorrect-example title="Wrong project name" conditions="Modifying project files" expected-result="Exact project scope" incorrectness-criteria="Incorrect project name">:memo:(project:amiya): update documentation</incorrect-example>
        </example>
        <example title="GitHub/Repository Scope">
          <correct-example title="GitHub workflows" conditions="Modifying .github/workflows/" expected-result="Valid gh scope" correctness-criteria="Uses gh scope">:green_heart:(gh): fix renovate workflow permissions</correct-example>
          <correct-example title="GitHub configuration" conditions="Modifying .github/ files" expected-result="Valid gh scope" correctness-criteria="Uses gh scope">:wrench:(gh): update issue templates</correct-example>
          <correct-example title="Root repository files" conditions="Modifying root config files" expected-result="Valid gh scope" correctness-criteria="Uses gh scope">:see_no_evil:(gh): update gitignore for IDE files</correct-example>
          <correct-example title="CI/CD configuration" conditions="Modifying CI tools config" expected-result="Valid gh scope" correctness-criteria="Uses gh scope">:wrench:(gh): update trunk linters configuration</correct-example>
          <correct-example title="Repository documentation" conditions="Modifying README, LICENSE" expected-result="Valid gh scope" correctness-criteria="Uses gh scope">:memo:(gh): update main README with new project structure</correct-example>
          <incorrect-example title="Too specific gh scope" conditions="Modifying GitHub files" expected-result="Simple gh scope" incorrectness-criteria="Overcomplicating scope">:wrench:(gh:workflows): update configuration</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Description must start with lowercase, use present imperative tense, no final period, max 200 characters</description>
      <examples>
        <example title="Description Format">
          <correct-example title="Proper description" conditions="Writing commit description" expected-result="Valid description" correctness-criteria="Lowercase, imperative, no period">:sparkles:(k8s:monitoring): add prometheus alerting rules</correct-example>
          <incorrect-example title="Improper description" conditions="Writing commit description" expected-result="Valid description" incorrectness-criteria="Uppercase, past tense, period">:sparkles:(k8s:monitoring): Added Prometheus alerting rules.</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>Create atomic commits - one logical change per commit, allow multiple scopes only when change affects multiple components atomically</description>
      <examples>
        <example title="Single Scope Atomic Commits">
          <correct-example title="Single project commit" conditions="Changes affecting one project" expected-result="Single scope commit" correctness-criteria="One scope for one logical change">:memo:(project:amiya.akn): update architecture diagram</correct-example>
          <correct-example title="Single catalog commit" conditions="Changes affecting one catalog" expected-result="Single scope commit" correctness-criteria="One scope for one logical change">:sparkles:(catalog:fluxcd): add cert-manager configuration</correct-example>
          <incorrect-example title="Mixed unrelated scopes" conditions="Unrelated changes" expected-result="Separate commits" incorrectness-criteria="Multiple unrelated changes">:memo:(project:amiya.akn,catalog:ansible): update docs and roles</incorrect-example>
        </example>
        <example title="Multiple Scopes for Atomic Changes">
          <correct-example title="Cross-project functional change" conditions="Single feature affecting multiple projects" expected-result="Multiple scopes allowed" correctness-criteria="Logical atomic change across projects">:sparkles:(project:amiya.akn,project:maison): add shared monitoring stack integration</correct-example>
          <correct-example title="Infrastructure change affecting catalogs" conditions="Update affecting multiple catalogs" expected-result="Multiple scopes allowed" correctness-criteria="Single logical infrastructure change">:arrow_up:(catalog:fluxcd,catalog:kustomize): update cert-manager to v1.15.0</correct-example>
          <correct-example title="Cross-catalog dependency update" conditions="Dependency update affecting multiple catalogs" expected-result="Multiple scopes allowed" correctness-criteria="Single dependency affecting multiple components">:arrow_up:(catalog:ansible,catalog:crossplane): update kubernetes version to v1.29</correct-example>
          <incorrect-example title="Multiple unrelated changes" conditions="Different unrelated changes" expected-result="Separate commits" incorrectness-criteria="Changes that should be separate commits">:wrench:(project:amiya.akn,catalog:fluxcd): fix config and add new feature</incorrect-example>
        </example>
        <example title="When to Use Multiple Scopes">
          <correct-example title="Shared component update" conditions="Updating shared component used by multiple projects" expected-result="Multiple scopes for shared impact" correctness-criteria="Single change with multiple valid impacts">:wrench:(project:amiya.akn,project:sof.akn): update shared traefik ingress class configuration</correct-example>
          <correct-example title="Breaking change coordination" conditions="Breaking change requiring coordinated updates" expected-result="Multiple scopes for coordinated change" correctness-criteria="Single breaking change with coordinated fixes">:boom:(catalog:crossplane,project:chezmoi.sh): migrate to crossplane v1.15 provider format</correct-example>
          <incorrect-example title="Documentation scattered updates" conditions="Updating documentation in multiple places" expected-result="Separate documentation commits" incorrectness-criteria="Should be separate logical documentation updates">:memo:(project:amiya.akn,project:maison,project:sof.akn): update various documentation</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>Every commit MUST include a descriptive body explaining the why and impact, especially for non-trivial changes</description>
      <examples>
        <example title="Body Requirement">
          <correct-example title="Commit with explanatory body" conditions="Making configuration change" expected-result="Clear explanation of change" correctness-criteria="Body explains why and impact"><![CDATA[git commit -S -s -m ":wrench:(k8s:cert-manager): increase renewal threshold to 15 days" \
-m "Previous threshold of 7 days was causing unnecessary certificate" \
-m "renewals and putting load on Let's Encrypt rate limits." \
-m "This change reduces renewal frequency while maintaining security."]]></correct-example>
          <incorrect-example title="Missing body for non-trivial change" conditions="Making complex change" expected-result="Body explaining change" incorrectness-criteria="No body for non-trivial change">:wrench:(k8s:cert-manager): increase renewal threshold to 15 days</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use JIRA ticket format for branches when applicable: JIRA_TICKET/description</description>
      <examples>
        <example title="Branch Naming">
          <correct-example title="JIRA branch" conditions="Working on JIRA ticket" expected-result="Proper branch name" correctness-criteria="Uses JIRA format">ARC-1234/add-monitoring-dashboard</correct-example>
          <correct-example title="Feature branch" conditions="Working on feature without JIRA" expected-result="Descriptive branch name" correctness-criteria="Uses descriptive format">feat/new-sof-project</correct-example>
          <incorrect-example title="Generic branch" conditions="Creating feature branch" expected-result="Descriptive branch name" incorrectness-criteria="Too generic">feature/updates</incorrect-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>Never update JIRA tickets automatically - always ask for user confirmation first</description>
      <examples>
        <example title="JIRA Updates">
          <correct-example title="Ask for confirmation" conditions="JIRA ticket update needed" expected-result="User confirmation" correctness-criteria="Asks before updating">Should I update the JIRA ticket ARC-1234 status to 'In Progress'?</correct-example>
          <incorrect-example title="Auto-update" conditions="JIRA ticket update needed" expected-result="User confirmation" incorrectness-criteria="Updates without asking">I'll update the JIRA ticket status automatically</incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="critical">
      <description>When scope is ambiguous, analyze project structure and propose appropriate scope with user validation</description>
      <examples>
        <example title="Scope Determination">
          <correct-example title="Analyze and propose scope" conditions="Modifying catalog/fluxcd/cert-manager/" expected-result="User-validated scope" correctness-criteria="Proposes logical scope and asks for confirmation"><![CDATA["I see changes in catalog/fluxcd/cert-manager/. This appears to be FluxCD
configuration for cert-manager. Should I use 'flux:cert-manager' as the scope?
Alternative could be 'k8s:cert-manager' if this focuses more on the 
Kubernetes aspects."]]></correct-example>
          <incorrect-example title="Assuming scope" conditions="Unclear scope" expected-result="User validation" incorrectness-criteria="Makes assumption without asking">I'll use k8s:cert-manager since it seems most appropriate</incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>Reference last 10 commits to maintain consistency with project conventions and style</description>
      <examples>
        <example title="Consistency Check">
          <correct-example title="Following project patterns" conditions="Creating new commit" expected-result="Consistent with project style" correctness-criteria="Matches established patterns">Based on recent commits, I see you use 'project:NAME' format for project-specific changes and emoji prefixes. I'll follow this pattern.</correct-example>
          <incorrect-example title="Ignoring project conventions" conditions="Creating new commit" expected-result="Consistent style" incorrectness-criteria="Doesn't follow established patterns">I'll use my own commit format regardless of project history</incorrect-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>Ask for missing information rather than making assumptions when creating commits</description>
      <examples>
        <example title="Information Gathering">
          <correct-example title="Ask for details" conditions="Missing commit information" expected-result="Complete information" correctness-criteria="Asks specific questions">What type of change is this? Are you adding a feature (:sparkles:), fixing a bug (:bug:), or updating documentation (:memo:)?</correct-example>
          <incorrect-example title="Assume details" conditions="Missing commit information" expected-result="Complete information" incorrectness-criteria="Makes assumptions">I'll assume this is a feature addition</incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="critical">
      <description>When .commitlintrc.js is modified, automatically update this rule to reflect new allowed types and scopes</description>
      <examples>
        <example title="Synchronization with .commitlintrc.js">
          <correct-example title="Detect configuration changes" conditions="Modifying .commitlintrc.js" expected-result="Rule update proposal" correctness-criteria="Offers to update rule with new configuration">I see you've modified .commitlintrc.js with new emoji types/scopes. Should I update the git-commits-arcane.mdc rule to reflect these changes?</correct-example>
          <correct-example title="Validate against configuration" conditions="Creating commit with new type/scope" expected-result="Configuration-based validation" correctness-criteria="Checks against current .commitlintrc.js">This scope is not in the current .commitlintrc.js configuration. Should we add it or use a different scope?</correct-example>
          <incorrect-example title="Ignore configuration changes" conditions="Outdated rule configuration" expected-result="Updated rule" incorrectness-criteria="Uses outdated emoji or scope list">I'll continue using the old emoji types even though .commitlintrc.js has been updated</incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <grammar>
    <grammar-entry title="Commit Message Pattern">
      <pattern description="Semantic emoji commit format">^:[a-z_]+:\([^)]+\): [a-z][^.]{0,198}$</pattern>
      <example description="Valid commit message">:sparkles:(project:amiya.akn): add new monitoring dashboard</example>
    </grammar-entry>
    <grammar-entry title="Branch Naming Pattern">
      <pattern description="Branch naming format">^(feat|fix|docs|chore|refactor)\/[a-z0-9-]+$|^[A-Z]+-\d+\/[a-z0-9-]+$</pattern>
      <example description="Valid branch names">feat/new-sof-project
ARC-1234/add-monitoring-dashboard</example>
    </grammar-entry>
    <schema title="Arcane Git Commit Schema" description="Complete structure for Git commits in the Arcane project (synchronized with .commitlintrc.js)">
<![CDATA[Commit Message Structure:
:emoji:(scope[,scope2,...]): description

[required body for non-trivial changes - max 80 chars per line]

[optional footer - JIRA refs, breaking changes, co-authors]

Required Elements:
- emoji: Gitmoji semantic emoji (full list from .commitlintrc.js)
  Core Types:
  * :sparkles: - introduce new features
  * :bug: - fix a bug
  * :memo: - add or update documentation
  * :tada: - begin a project
  * :arrow_up: - upgrade dependencies
  * :arrow_down: - downgrade dependencies
  * :zap: - improve performance
  * :lock: - fix security or privacy issues
  * :wrench: - add or update configuration files
  * :bricks: - infrastructure related changes
  * :fire: - remove code or files
  * :recycle: - refactor code
  * :green_heart: - fix CI build
  * :ambulance: - critical hotfix
  * :boom: - introduce breaking changes
  * :art: - improve structure/format of code
  * :lipstick: - add or update UI and style files
  * :construction_worker: - add or update CI build system
  * :package: - add or update compiled files or packages
  * :heavy_plus_sign: - add a dependency
  * :heavy_minus_sign: - remove a dependency
  * :truck: - move or rename resources
  * :see_no_evil: - add or update .gitignore file
  * :bookmark: - release/version tags
  * :rotating_light: - fix compiler/linter warnings
  * :white_check_mark: - add, update or pass tests
  * :test_tube: - add a failing test
  * :coffin: - remove dead code
  * :bulb: - add or update comments in source code
  * :wastebasket: - deprecate code that needs cleanup
  * :passport_control: - work on authorization, roles and permissions
  * :adhesive_bandage: - simple fix for non-critical issue
  * :bento: - add or update assets
  * :technologist: - improve developer experience
  * :rocket: - deploy stuff
  * :stethoscope: - add or update healthcheck
  * :safety_vest: - add or update validation
  * :closed_lock_with_key: - add or update secrets
  * :label: - add or update types
  * :pushpin: - pin dependencies to specific versions
  * :hammer: - add or update development scripts
  * :page_facing_up: - add or update license
  * :pencil2: - fix typos
  * :rewind: - revert changes
  * :twisted_rightwards_arrows: - merge branches
  * :alembic: - perform experiments
  * :alien: - update code due to external API changes
  * :building_construction: - make architectural changes

- scope: context of the change (exact scopes from .commitlintrc.js)
  Catalog Scopes:
  * catalog:ansible - Ansible role catalog
  * catalog:crossplane - Crossplane resource catalog  
  * catalog:flakes - Nix flakes catalog
  * catalog:kustomize - Kustomize component catalog
  * catalog:kairos-bundle - Kairos bundle catalog
  
  Project Scopes:
  * project:amiya.akn - Amiya.akn project
  * project:chezmoi.sh - Chezmoi.sh project
  * project:hass - Home Assistant project
  * project:maison - Maison project
  * project:shodan.akn - Shodan.akn project
  * project:sof.akn - 'Spirit of Fire' project
  
  Repository Scope:
  * gh - GitHub/CI/repository related changes

- Multiple scopes: allowed when single logical change affects multiple components
  * Format: scope1,scope2,scope3 (comma-separated, no spaces)
  * Use only for truly atomic cross-component changes
  * Examples: project:amiya.akn,project:maison or catalog:fluxcd,catalog:kustomize

- description: lowercase, imperative, no period, max 100 chars (per commitlint config)
- body: explain why and impact for non-trivial changes (max 80 chars per line)
- signoff: always use -s flag (enforced by commitlint)
- GPG signature: always use -S flag

Branch Naming:
- Feature: feat/description or JIRA_TICKET/description
- Bugfix: fix/description or JIRA_TICKET/description
- Documentation: docs/description
- Examples: feat/new-sof-project, ARC-1234/add-monitoring, docs/update-bootstrap-guide

Workflow:
1. Analyze changed files and determine scope(s)
2. Choose appropriate Gitmoji emoji from .commitlintrc.js
3. Write imperative description (max 100 chars)
4. Add explanatory body for non-trivial changes
5. Use -S -s flags for signatures
6. Validate against .commitlintrc.js configuration
7. Reference recent commits for consistency]]>
    </schema>
  </grammar>
  <context description="The Arcane project is a multi-cluster Kubernetes infrastructure project using GitOps with FluxCD, managing multiple environments (amiya.akn, maison, sof.akn, shodan.akn) with various infrastructure components including Terraform, Ansible, and Kubernetes manifests. Commits should reflect the distributed nature of the infrastructure and maintain clarity about which component or project is being modified.">
    These rules ensure commits are properly categorized, traceable, and maintain the security standards expected in infrastructure code. The emoji-based typing system provides immediate visual context while the scoping system ensures clear attribution to the correct project or component within the Arcane ecosystem.
  </context>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
  </references>
  <examples>
    <example title="Complete Real-World Commit Examples">
      <correct-example title="Adding new Kubernetes resource" conditions="Adding monitoring to amiya.akn project" expected-result="Clear, categorized commit" correctness-criteria="Follows all format rules with proper scope and body"><![CDATA[git commit -S -s -m ":sparkles:(project:amiya.akn): add prometheus servicemonitor for api metrics" \
-m "Enables monitoring of API response times and error rates through" \
-m "the existing Prometheus stack. ServiceMonitor targets the API" \
-m "service on port 8080/metrics endpoint." \
-m "" \
-m "This provides visibility into API performance and supports" \
-m "the alerting rules defined in the monitoring stack."]]></correct-example>
      <correct-example title="Infrastructure bug fix" conditions="Fixing certificate issue" expected-result="Clear fix with impact explanation" correctness-criteria="Explains problem and solution"><![CDATA[git commit -S -s -m ":bug:(k8s:cert-manager): fix wildcard certificate renewal issue" \
-m "ClusterIssuer was incorrectly configured with HTTP01 challenge" \
-m "for wildcard certificates, which is not supported by Let's Encrypt." \
-m "Changed to DNS01 challenge using Cloudflare DNS provider." \
-m "" \
-m "This resolves the certificate renewal failures that were causing" \
-m "HTTPS outages for *.amiya.akn services."]]></correct-example>
      <correct-example title="Documentation update" conditions="Updating bootstrap docs" expected-result="Clear documentation change" correctness-criteria="Describes documentation scope and purpose"><![CDATA[git commit -S -s -m ":memo:(project:sof.akn): add bootstrap documentation with Talos setup" \
-m "Comprehensive guide covering:" \
-m "- Talos Linux cluster bootstrap process" \
-m "- ArgoCD installation and configuration" \
-m "- Initial application deployment" \
-m "" \
-m "This enables new team members to set up the SoF cluster" \
-m "from scratch following standardized procedures."]]></correct-example>
      <correct-example title="Dependency update" conditions="Renovate bot update" expected-result="Clear dependency update" correctness-criteria="Specifies exact version and component"><![CDATA[git commit -S -s -m ":arrow_up:(deps): update helm release argo-cd to v8.1.0" \
-m "Automated update from Renovate bot." \
-m "" \
-m "Changes include:" \
-m "- Improved RBAC management" \
-m "- Enhanced security policies" \
-m "- Bug fixes for ApplicationSet controller"]]></correct-example>
      <correct-example title="Security improvement" conditions="Tightening RBAC" expected-result="Clear security change with justification" correctness-criteria="Explains security impact and scope"><![CDATA[git commit -S -s -m ":lock:(k8s:rbac): restrict external-dns service account permissions" \
-m "Removed cluster-admin role and replaced with minimal permissions:" \
-m "- endpoints (get, list, watch)" \
-m "- services (get, list, watch)" \
-m "- ingresses (get, list, watch)" \
-m "" \
-m "This follows principle of least privilege and reduces attack" \
-m "surface if the external-dns pod is compromised."]]></correct-example>
      <incorrect-example title="Too vague" conditions="Making change without context" expected-result="Specific, informative commit" incorrectness-criteria="Lacks specificity and context">:wrench:(k8s): update config</incorrect-example>
      <incorrect-example title="Wrong emoji" conditions="Fixing a bug" expected-result="Correct emoji usage" incorrectness-criteria="Uses feature emoji for bug fix">:sparkles:(k8s:cert-manager): fix certificate renewal</incorrect-example>
      <incorrect-example title="Missing scope specificity" conditions="Modifying specific component" expected-result="Specific scope" incorrectness-criteria="Scope too generic">:bug:(k8s): fix ingress issue</incorrect-example>
      <incorrect-example title="No body for complex change" conditions="Significant configuration change" expected-result="Explanatory body" incorrectness-criteria="Complex change without explanation">:wrench:(k8s:monitoring): reconfigure prometheus storage</incorrect-example>
    </example>
    <example title="Project Structure Based Scoping">
      <correct-example title="Project-specific application" conditions="Modifying src/apps/ in a project" expected-result="Project scope" correctness-criteria="Uses project:NAME scope">:sparkles:(project:maison): add jellyfin media server deployment</correct-example>
      <correct-example title="Project infrastructure" conditions="Modifying src/infrastructure/ in a project" expected-result="Project scope with component" correctness-criteria="Uses project:NAME or specific component">:wrench:(project:amiya.akn): update traefik ingress configuration</correct-example>
      <correct-example title="Shared catalog component" conditions="Modifying catalog/fluxcd/" expected-result="Flux scope" correctness-criteria="Uses flux:COMPONENT">:arrow_up:(flux:cert-manager): update helm chart version</correct-example>
      <correct-example title="Shared defaults" conditions="Modifying defaults/kubernetes/" expected-result="Component scope" correctness-criteria="Uses component scope">:wrench:(k8s:traefik): update default helm values</correct-example>
      <correct-example title="Ansible role" conditions="Modifying catalog/ansible/" expected-result="Ansible scope" correctness-criteria="Uses ansible:ROLE">:sparkles:(ansible:pve.kairos-cluster): add VM memory configuration</correct-example>
    </example>
  </examples>
  <utilities>
    <section title="Pre-commit Checklist">
      <checklist>
        <item priority="critical">Choose semantic emoji that matches change type</item>
        <item priority="critical">Use correct scope format based on file location</item>
        <item priority="critical">Description in lowercase, imperative, no period</item>
        <item priority="critical">Single logical change per commit</item>
        <item priority="critical">Include explanatory body for non-trivial changes</item>
        <item priority="critical">Use both signoff (-s) and GPG signature (-S)</item>
        <item priority="critical">Validate scope with user if ambiguous</item>
        <item priority="critical">Check recent commits for consistency</item>
        <item priority="critical">Never auto-update JIRA without confirmation</item>
      </checklist>
    </section>
    <section title="Quick Reference Commands">
      <command-group>
        <command title="Check Recent Commits">
          <syntax>git log --oneline --no-merges -10</syntax>
          <description>Review recent commit patterns for consistency</description>
        </command>
        <command title="Signed Commit with Body">
          <syntax><![CDATA[git commit -S -s -m ":sparkles:(project:amiya.akn): add monitoring dashboard" \
-m "Provides real-time metrics for cluster health and application" \
-m "performance. Integrates with existing Prometheus stack."]]></syntax>
          <description>Create properly signed commit with explanatory body</description>
        </command>
        <command title="Staged File Analysis">
          <syntax>git diff --cached --name-only</syntax>
          <description>Review staged files to determine appropriate scope</description>
        </command>
        <command title="Atomic Staging">
          <syntax>git add path/to/specific/files</syntax>
          <description>Stage only files related to single logical change</description>
        </command>
        <command title="Commit Verification">
          <syntax>git show --show-signature</syntax>
          <description>Verify last commit has proper signatures</description>
        </command>
      </command-group>
    </section>
    <section title="Complete Gitmoji Reference (from .commitlintrc.js)">
      <emoji-guide>
        <emoji-category title="Core Development">
          <emoji-entry>
            <emoji>:sparkles:</emoji>
            <usage>Introduce new features</usage>
            <example>:sparkles:(project:amiya.akn): add monitoring dashboard</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:bug:</emoji>
            <usage>Fix a bug</usage>
            <example>:bug:(catalog:fluxcd): fix cert-manager helm values</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:memo:</emoji>
            <usage>Add or update documentation</usage>
            <example>:memo:(project:sof.akn): add bootstrap documentation</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:art:</emoji>
            <usage>Improve structure/format of the code</usage>
            <example>:art:(catalog:kustomize): reorganize manifest structure</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:recycle:</emoji>
            <usage>Refactor code</usage>
            <example>:recycle:(project:maison): restructure application deployments</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="Infrastructure & Configuration">
          <emoji-entry>
            <emoji>:bricks:</emoji>
            <usage>Infrastructure related changes</usage>
            <example>:bricks:(catalog:ansible): update PVE cluster configuration</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:wrench:</emoji>
            <usage>Add or update configuration files</usage>
            <example>:wrench:(catalog:fluxcd): update traefik ingress configuration</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:rocket:</emoji>
            <usage>Deploy stuff</usage>
            <example>:rocket:(project:amiya.akn): deploy new monitoring stack</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:building_construction:</emoji>
            <usage>Make architectural changes</usage>
            <example>:building_construction:(catalog:crossplane): restructure provider architecture</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="Dependencies & Updates">
          <emoji-entry>
            <emoji>:arrow_up:</emoji>
            <usage>Upgrade dependencies</usage>
            <example>:arrow_up:(catalog:fluxcd): update helm release argo-cd to v8.1.0</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:arrow_down:</emoji>
            <usage>Downgrade dependencies</usage>
            <example>:arrow_down:(project:maison): downgrade nodejs for compatibility</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:heavy_plus_sign:</emoji>
            <usage>Add a dependency</usage>
            <example>:heavy_plus_sign:(project:amiya.akn): add prometheus monitoring dependency</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:heavy_minus_sign:</emoji>
            <usage>Remove a dependency</usage>
            <example>:heavy_minus_sign:(project:maison): remove unused grafana dependency</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:pushpin:</emoji>
            <usage>Pin dependencies to specific versions</usage>
            <example>:pushpin:(catalog:fluxcd): pin cert-manager to v1.15.0</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="Security & Emergency">
          <emoji-entry>
            <emoji>:lock:</emoji>
            <usage>Fix security or privacy issues</usage>
            <example>:lock:(project:amiya.akn): tighten service account permissions</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:ambulance:</emoji>
            <usage>Critical hotfix</usage>
            <example>:ambulance:(project:amiya.akn): fix critical authentication bypass</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:closed_lock_with_key:</emoji>
            <usage>Add or update secrets</usage>
            <example>:closed_lock_with_key:(project:chezmoi.sh): update AWS credentials</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:passport_control:</emoji>
            <usage>Work on authorization, roles and permissions</usage>
            <example>:passport_control:(catalog:fluxcd): update RBAC configuration</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="CI/CD & DevOps">
          <emoji-entry>
            <emoji>:green_heart:</emoji>
            <usage>Fix CI Build</usage>
            <example>:green_heart:(gh): fix renovate workflow permissions</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:construction_worker:</emoji>
            <usage>Add or update CI build system</usage>
            <example>:construction_worker:(gh): add new deployment workflow</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:technologist:</emoji>
            <usage>Improve developer experience</usage>
            <example>:technologist:(gh): add development container configuration</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:hammer:</emoji>
            <usage>Add or update development scripts</usage>
            <example>:hammer:(gh): add cluster bootstrap script</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="Project & Release Management">
          <emoji-entry>
            <emoji>:tada:</emoji>
            <usage>Begin a project</usage>
            <example>:tada:(project:sof.akn): initiate new infrastructure project</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:bookmark:</emoji>
            <usage>Release/Version tags</usage>
            <example>:bookmark:(project:maison): release v2.1.0</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:boom:</emoji>
            <usage>Introduce breaking changes</usage>
            <example>:boom:(catalog:crossplane): change provider API structure</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:rewind:</emoji>
            <usage>Revert changes</usage>
            <example>:rewind:(project:amiya.akn): revert monitoring configuration</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="Code Quality & Maintenance">
          <emoji-entry>
            <emoji>:zap:</emoji>
            <usage>Improve performance</usage>
            <example>:zap:(catalog:fluxcd): optimize prometheus query performance</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:fire:</emoji>
            <usage>Remove code or files</usage>
            <example>:fire:(project:shodan.akn): remove deprecated monitoring stack</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:coffin:</emoji>
            <usage>Remove dead code</usage>
            <example>:coffin:(catalog:ansible): remove unused playbook variables</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:wastebasket:</emoji>
            <usage>Deprecate code that needs cleanup</usage>
            <example>:wastebasket:(gh): deprecate old workflow configuration</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:rotating_light:</emoji>
            <usage>Fix compiler/linter warnings</usage>
            <example>:rotating_light:(catalog:fluxcd): fix helm template linting warnings</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:adhesive_bandage:</emoji>
            <usage>Simple fix for non-critical issue</usage>
            <example>:adhesive_bandage:(project:maison): fix minor configuration typo</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:pencil2:</emoji>
            <usage>Fix typos</usage>
            <example>:pencil2:(project:amiya.akn): fix typos in documentation</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="Testing & Validation">
          <emoji-entry>
            <emoji>:white_check_mark:</emoji>
            <usage>Add, update or pass tests</usage>
            <example>:white_check_mark:(catalog:flakes): add integration tests for yaldap</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:test_tube:</emoji>
            <usage>Add a failing test</usage>
            <example>:test_tube:(project:amiya.akn): add failing test for monitoring alerts</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:safety_vest:</emoji>
            <usage>Add or update validation</usage>
            <example>:safety_vest:(catalog:crossplane): add provider validation rules</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:stethoscope:</emoji>
            <usage>Add or update healthcheck</usage>
            <example>:stethoscope:(project:maison): add application health monitoring</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="Assets & Resources">
          <emoji-entry>
            <emoji>:bento:</emoji>
            <usage>Add or update assets</usage>
            <example>:bento:(project:amiya.akn): update architecture diagram icons</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:truck:</emoji>
            <usage>Move or rename resources</usage>
            <example>:truck:(catalog:fluxcd): reorganize helm chart structure</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:package:</emoji>
            <usage>Add or update compiled files or packages</usage>
            <example>:package:(catalog:flakes): update compiled nix packages</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:lipstick:</emoji>
            <usage>Add or update UI and style files</usage>
            <example>:lipstick:(project:maison): update home dashboard styling</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="Documentation & Metadata">
          <emoji-entry>
            <emoji>:bulb:</emoji>
            <usage>Add or update comments in source code</usage>
            <example>:bulb:(catalog:ansible): add comments to complex playbook tasks</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:page_facing_up:</emoji>
            <usage>Add or update license</usage>
            <example>:page_facing_up:(gh): update Apache license headers</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:see_no_evil:</emoji>
            <usage>Add or update .gitignore file</usage>
            <example>:see_no_evil:(gh): update gitignore for IDE files</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:label:</emoji>
            <usage>Add or update types</usage>
            <example>:label:(catalog:crossplane): add resource type definitions</example>
          </emoji-entry>
        </emoji-category>
        <emoji-category title="Advanced & Experimental">
          <emoji-entry>
            <emoji>:alembic:</emoji>
            <usage>Perform experiments</usage>
            <example>:alembic:(project:sof.akn): experiment with new monitoring approach</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:alien:</emoji>
            <usage>Update code due to external API changes</usage>
            <example>:alien:(catalog:crossplane): adapt to AWS provider API changes</example>
          </emoji-entry>
          <emoji-entry>
            <emoji>:twisted_rightwards_arrows:</emoji>
            <usage>Merge branches</usage>
            <example>:twisted_rightwards_arrows:(project:amiya.akn): merge feature branch</example>
          </emoji-entry>
        </emoji-category>
      </emoji-guide>
    </section>
    <section title="Scope Decision Tree (based on .commitlintrc.js)">
      <decision-tree>
        <decision-node>
          <question>Are you modifying files in projects/[project-name]/</question>
          <yes-path>
            <single-project>Use scope: project:[project-name]</single-project>
            <multiple-projects>Use scopes: project:name1,project:name2 (if single logical change affects multiple projects)</multiple-projects>
            <available-projects>
              - project:amiya.akn
              - project:chezmoi.sh  
              - project:hass
              - project:maison
              - project:shodan.akn
              - project:sof.akn
            </available-projects>
          </yes-path>
          <no-path>Continue to next question</no-path>
        </decision-node>
        <decision-node>
          <question>Are you modifying catalog/ files?</question>
          <yes-path>
            <single-catalog>Use scope: catalog:[type]</single-catalog>
            <multiple-catalogs>Use scopes: catalog:type1,catalog:type2 (if single change affects multiple catalogs)</multiple-catalogs>
            <available-catalogs>
              - catalog:ansible (for catalog/ansible/)
              - catalog:crossplane (for catalog/crossplane/)
              - catalog:flakes (for catalog/flakes/)
              - catalog:kustomize (for catalog/kustomize/)
              - catalog:kairos-bundle (for catalog/kairos-bundles/)
            </available-catalogs>
          </yes-path>
          <no-path>Continue to next question</no-path>
        </decision-node>
        <decision-node>
          <question>Are you modifying GitHub workflows, CI, or root repository files?</question>
          <yes-path>Use scope: gh</yes-path>
          <no-path>Ask user for clarification or check if change spans multiple scopes</no-path>
        </decision-node>
        <decision-node>
          <question>Does your change affect multiple components with a single logical purpose?</question>
          <yes-path>
            <cross-component-examples>
              Valid multi-scope scenarios:
              - project:amiya.akn,project:maison (shared infrastructure change)
              - catalog:fluxcd,catalog:kustomize (dependency update affecting both)
              - catalog:ansible,catalog:crossplane (Kubernetes version update)
              - project:chezmoi.sh,catalog:crossplane (Crossplane provider update)
            </cross-component-examples>
          </yes-path>
          <no-path>Use single scope or split into separate commits</no-path>
        </decision-node>
      </decision-tree>
      <scope-validation>
        <validation-rule>Always check against .commitlintrc.js allowed scopes</validation-rule>
        <validation-rule>Multiple scopes must represent single logical change</validation-rule>
        <validation-rule>Format multiple scopes as: scope1,scope2,scope3 (no spaces)</validation-rule>
        <validation-rule>Maximum recommended scopes per commit: 3</validation-rule>
      </scope-validation>
    </section>
  </utilities>
  <workflow>
    <section title="Complete Commit Workflow">
      <step number="1" priority="critical">
        <title>Analyze Changes and Context</title>
        <description>Review all modified files and understand the scope and impact</description>
        <actions>
          <action>git status</action>
          <action>git diff --cached --name-only</action>
          <action>git log --oneline --no-merges -10</action>
        </actions>
        <validation>Understand which components/projects are affected</validation>
      </step>
      <step number="2" priority="critical">
        <title>Determine Scope(s) and Emoji</title>
        <description>Identify the appropriate scope(s) and semantic emoji for the change</description>
        <workflow>
          <action>Review file paths to determine scope using decision tree</action>
          <action>Check if changes affect multiple components with single logical purpose</action>
          <action>Validate scopes against .commitlintrc.js configuration</action>
          <action>Format multiple scopes as comma-separated (no spaces): scope1,scope2</action>
          <action>Analyze the type of change to select appropriate Gitmoji emoji</action>
          <action>If scope is ambiguous, propose options and ask user</action>
          <action>Ensure consistency with recent commit patterns</action>
        </workflow>
        <validation>Confirm scope(s) and emoji match the actual changes and are valid per .commitlintrc.js</validation>
      </step>
      <step number="3" priority="high">
        <title>Create Atomic Commits</title>
        <description>Ensure each commit represents one logical change</description>
        <actions>
          <action>git add [specific files]</action>
          <action>Separate changes affecting different projects/components</action>
        </actions>
        <validation>Single logical change per commit</validation>
      </step>
      <step number="4" priority="critical">
        <title>Format Commit Message</title>
        <description>Create commit message following emoji(scope): description format</description>
        <workflow>
          <action>Write clear, imperative description (lowercase, no period)</action>
          <action>Add explanatory body for non-trivial changes</action>
          <action>Include references if applicable (JIRA, issues)</action>
        </workflow>
        <validation>Message follows format and provides sufficient context</validation>
      </step>
      <step number="5" priority="critical">
        <title>Sign and Commit</title>
        <description>Create signed commit with both signoff and GPG signature</description>
        <actions>
          <action>git commit -S -s -m "emoji(scope): description" -m "body line 1" -m "body line 2"</action>
        </actions>
        <validation>Commit is properly signed and formatted</validation>
      </step>
      <step number="6" priority="high">
        <title>Verify and Push</title>
        <description>Review commit and push to remote</description>
        <actions>
          <action>git show --show-signature</action>
          <action>git push origin [branch-name]</action>
        </actions>
        <validation>Commit appears correctly in log with signatures</validation>
      </step>
    </section>
  </workflow>
</rule>
